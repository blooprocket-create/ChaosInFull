generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stats        PlayerStat?
  characters   Character[]
  accountItemStacks AccountItemStack[]
  chatMessages ChatMessage[]
}

model PlayerStat {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  level     Int      @default(1)
  class     String   @default("Beginner")
  exp       Int      @default(0)
  gold      Int      @default(0)
  premiumGold Int    @default(0)
  hp        Int      @default(100)
  mp        Int      @default(50)
  strength  Int      @default(1)
  agility   Int      @default(1)
  intellect Int      @default(1)
  luck      Int      @default(1)
  updatedAt DateTime @updatedAt
}

model Character {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  class     String   @default("Beginner")
  gender    Gender
  hat       Hat
  level     Int      @default(1)
  exp       Int      @default(0)
  miningExp Int      @default(0)
  miningLevel Int    @default(1)
  woodcuttingExp Int   @default(0)
  woodcuttingLevel Int @default(1)
  craftingExp Int      @default(0)
  craftingLevel Int    @default(1)
  fishingExp Int       @default(0)
  fishingLevel Int     @default(1)
  seenWelcome Boolean @default(false)
  lastScene  String   @default("Town")
  lastSeenAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemStacks ItemStack[]
  craftQueue CraftQueue?
  chatMessages ChatMessage[]
  characterQuests CharacterQuest[]
  @@unique([userId, name])
}

model ItemStack {
  id           String   @id @default(cuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  itemKey      String
  count        Int      @default(0)
  updatedAt    DateTime @updatedAt
  @@unique([characterId, itemKey])
}

model CraftQueue {
  id           String    @id @default(cuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String    @unique
  furnace      Json?
  workbench    Json?
  sawmill      Json?
  updatedAt    DateTime  @updatedAt
}

model AccountItemStack {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  itemKey   String
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
  @@unique([userId, itemKey])
}

model ChatMessage {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  character Character? @relation(fields: [characterId], references: [id])
  characterId String?
  text      String
  createdAt DateTime @default(now())
  // Optional zone/scene for scoping later
  scene     String   @default("Town")
}

// Quests
model Quest {
  id              String   @id
  name            String
  description     String
  objectiveType   String   // e.g. "KILL"
  objectiveTarget String   // e.g. "slime"
  objectiveCount  Int      // e.g. 5
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  characterQuests CharacterQuest[]
}

model CharacterQuest {
  id           String    @id @default(cuid())
  character    Character @relation(fields: [characterId], references: [id])
  characterId  String
  quest        Quest     @relation(fields: [questId], references: [id])
  questId      String
  status       QuestStatus @default(ACTIVE)
  progress     Int       @default(0)
  // Whether the player has claimed the rewards for this quest (for hand-in steps)
  claimedRewards Boolean  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  @@unique([characterId, questId])
}

enum QuestStatus {
  AVAILABLE
  ACTIVE
  COMPLETED
}

enum Gender {
  Male
  Female
  Nonbinary
}

enum Hat {
  STR
  INT
  AGI
  LUK
}